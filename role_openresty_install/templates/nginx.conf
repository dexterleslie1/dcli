#user  nobody;
worker_processes auto;
worker_rlimit_nofile 65535;

# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

# 开启debug级别日志，否则ngx.log不能输出debug级别日志
# https://stackoverflow.com/questions/55975325/nothing-is-written-to-nginx-access-log-error-log-how-to-troubleshoot
error_log  logs/error.log  warn;

#pid        logs/nginx.pid;

events {
    worker_connections  65535;
}

http {
    include /usr/local/openresty/nginx/conf/naxsi_core.rules;

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 16 64k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/javascript text/css application/xml;
    gzip_vary on;
    server_tokens off;
    autoindex off;
    access_log off;
    client_body_buffer_size  10k;
    client_header_buffer_size 1k;
    client_max_body_size 120k;
    large_client_header_buffers 2 8k;
    gzip_proxied any;

    # 反向代理配置
    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 32 8k;
    proxy_busy_buffers_size 16k;

    lua_shared_dict my_limit_req_store 512m;
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;;";
    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=2g use_temp_path=off;

    access_by_lua_block {
        ngx.req.clear_header("X-Forwarded-For");
        ngx.req.set_header("X-Forwarded-For", ngx.var.remote_addr);

    	-- 获取客户端真实ip地址
        local common = require("my_common");
        local clientIp = ngx.var.remote_addr;

        local requestUrl = common.getRequestUrl();

	    -- 低频多ip CC攻击检测
    	local dictMyLimitReq = ngx.shared.my_limit_req_store;
	    local keyLatestLogTime = "lowFreqCCLatestLogTime#" .. clientIp;
        local keyTemporary = "reqCount#" .. clientIp;
	    local keyFaultCounter = "faultCounter#" .. clientIp;
        local latestLogTime = dictMyLimitReq:get(keyLatestLogTime);
        local intervalSeconds = 5;
        local maxReqCount = 50;
        -- 请求犯规次数统计时间段60秒
        local faultCounterInterval = 60;
        -- 指定时间内允许最大犯规次数
        local maximumFaultCount = 9;

        -- 指定时间内请求频率超出这个值，要把客户端ip加入到黑名单列表
        local maxForbiddenReqCount = 120;

        local varTemporary = dictMyLimitReq:get(keyFaultCounter);
        if not varTemporary then
            dictMyLimitReq:set(keyFaultCounter, 0, faultCounterInterval);
        end

        -- 初次启动没有设置latestLogTime、reqCount#
        if not latestLogTime then
            local timeNow = ngx.now()*1000;
            dictMyLimitReq:set(keyLatestLogTime, timeNow);
            dictMyLimitReq:set(keyTemporary, 0);
        else
            local timeNow = ngx.now()*1000;
            local latestLogTime = dictMyLimitReq:get(keyLatestLogTime);
            local milliseconds = timeNow - latestLogTime;
            -- 统计请求频率达到时间段
            if milliseconds>=intervalSeconds*1000 then
                local value = dictMyLimitReq:get(keyTemporary);

                if value>=maxForbiddenReqCount then
                    -- 5秒内请求总数超过120次
                    ngx.log(ngx.WARN, "Client " .. clientIp .. " committed REQ " .. value ..  " times maximum allow " .. maxForbiddenReqCount  .. " within " .. intervalSeconds .. " seconds, request url=" .. requestUrl);


                elseif value>=maxReqCount then
                    local faultCounter = dictMyLimitReq:incr(keyFaultCounter, 1);
                    ngx.log(ngx.WARN, "客户端 " .. clientIp .. " REQAcc犯规+1，reqCnt=" .. value .. ";maximumAllow=" .. maxReqCount);

                    -- 60秒内犯规(每5秒请求总数超过50次)次数超过9次
                    if faultCounter and faultCounter>=maximumFaultCount then
                        ngx.log(ngx.WARN, "Client " .. clientIp .. " committed REQAcc " .. faultCounter ..  " times maximum allow " .. maximumFaultCount  .. " within " .. faultCounterInterval .. " seconds, request url=" .. requestUrl);
                    end
                end

                dictMyLimitReq:set(keyTemporary, 0);
                dictMyLimitReq:set(keyLatestLogTime, timeNow);
            end
        end
        dictMyLimitReq:incr(keyTemporary, 1);
    }

    include default.conf;
}
